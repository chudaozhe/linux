
source src1
{
	type			= mysql

	sql_host		= 127.0.0.1
	sql_user		= root
	sql_pass		= 
	sql_db			= test
	sql_port		= 3306	# optional, default is 3306

	sql_query_pre		= SET NAMES utf8
	# sql_query_pre		= SET SESSION query_cache_type=OFF

	sql_query		= \
		SELECT aid, content \
		FROM es_reply  \
		UNION SELECT id,content \
		FROM es_guestbook_content \
		UNION SELECT gid,grouptitle \
		FROM es_group


	sql_attr_uint		= id #从SQL读取到的值必须为整数
	# sql_attr_string		= stitle
	# sql_field_string	= author
	
	# document info query, ONLY for CLI search (ie. testing and debugging)
	sql_query_info		= SELECT * FROM es_article WHERE aid=$id

}


# inherited source example
#
# all the parameters are copied from the parent source,
# and may then be overridden in this source definition
source src1throttled : src1
{
	sql_ranged_throttle	= 100
}


index test1
{
	source			= src1

	path			= /data/apps/coreseek/var/data/test1

	charset_type		= zh_cn.utf-8
	charset_dictpath        = /data/apps/mmseg/etc/

	ngram_len		= 1
	ngram_chars		= U+3000..U+2FA1F
}


index test1stemmed : test1
{
	path			= /data/apps/coreseek/var/data/test1stemmed
	morphology		= stem_en
}

index dist1
{
	# 'distributed' index type MUST be specified
	type			= distributed

	# local index to be searched
	# there can be many local indexes configured
	local			= test1
	local			= test1stemmed

	# remote agent
	# multiple remote agents may be specified
	# syntax for TCP connections is 'hostname:port:index1,[index2[,...]]'
	# syntax for local UNIX connections is '/path/to/socket:index1,[index2[,...]]'
	agent			= localhost:9313:remote1
	agent			= localhost:9314:remote2,remote3
	# agent			= /var/run/searchd.sock:remote4

	# blackhole remote agent, for debugging/testing
	# network errors and search results will be ignored
	#
	# agent_blackhole		= testbox:9312:testindex1,testindex2


	# remote agent connection timeout, milliseconds
	# optional, default is 1000 ms, ie. 1 sec
	agent_connect_timeout	= 1000

	# remote agent query timeout, milliseconds
	# optional, default is 3000 ms, ie. 3 sec
	agent_query_timeout	= 3000
}


# realtime index example
#
# you can run INSERT, REPLACE, and DELETE on this index on the fly
# using MySQL protocol (see 'listen' directive below)
index rt
{
	# 'rt' index type must be specified to use RT index
	type			= rt

	# index files path and file name, without extension
	# mandatory, path must be writable, extensions will be auto-appended
	path			= /data/apps/coreseek/var/data/rt

	# RAM chunk size limit
	# RT index will keep at most this much data in RAM, then flush to disk
	# optional, default is 32M
	#
	# rt_mem_limit		= 512M

	# full-text field declaration
	# multi-value, mandatory
	rt_field		= title
	rt_field		= content

	# unsigned integer attribute declaration
	# multi-value (an arbitrary number of attributes is allowed), optional
	# declares an unsigned 32-bit attribute
	rt_attr_uint		= gid

	# RT indexes currently support the following attribute types:
	# uint, bigint, float, timestamp, string
	#
	# rt_attr_bigint		= guid
	# rt_attr_float		= gpa
	# rt_attr_timestamp	= ts_added
	# rt_attr_string		= author
}

#############################################################################
## indexer settings
#############################################################################

indexer
{
	mem_limit		= 128M
}

searchd
{
	listen			= 9312
	log			= /data/apps/coreseek/var/log/searchd.log
	query_log		= /data/apps/coreseek/var/log/query.log
	read_timeout		= 5
	client_timeout		= 30
	max_children		= 30

	pid_file		= /data/apps/coreseek/var/log/searchd.pid
	max_matches		= 1000
	seamless_rotate		= 1
	preopen_indexes		= 1
	unlink_old		= 1
	workers			= threads # for RT to work
	binlog_path		= /data/apps/coreseek/var/data # binlog.001 etc will be created there

}

